//  Automatically generated by the FlatBuffers compiler, do not modify.            
//  SwiftFlatBuffers, licensed under the Apache License, Version 2.0, is from FlatBuffers.            
//            
//  SwiftFlatBuffers  <https://github.com/TonyStark106/SwiftFlatBuffers>            
//

import Foundation
import SwiftFlatBuffers

public enum Color: Int8 {

    case Red = 1

    case Green = 2

    case Blue = 8

}

public enum `Any`: UInt8 {

    case NONE = 0

    case MONSTER = 1

    case TESTSIMPLETABLEWITHENUM = 2

    case MYGAME_EXAMPLE2_MONSTER = 3

    internal var type: FBTable.Type? {
        switch self {
        case .NONE:
            return nil
        case .MONSTER:
            return Monster.self
        case .TESTSIMPLETABLEWITHENUM:
            return TestSimpleTableWithEnum.self
        case .MYGAME_EXAMPLE2_MONSTER:
            return Monster.self
        }
    }

    internal static let allValues = [NONE, MONSTER, TESTSIMPLETABLEWITHENUM, MYGAME_EXAMPLE2_MONSTER]

    internal static func value(_ ins: FBTable?) -> `Any` {
        if ins == nil {
            return .NONE
        }
        for value in allValues {
            if type(of: ins!) == value.type {
                return value
            }
        }
        fatalError("Can't not serialize \(String(describing: ins)) to `Any`")
    }

}

public final class Monster: FBTable {

    public final override var hardPos: FBOffset {
        return 10
    }

    public final override var hardSize: UInt {
        return 14
    }

    public final override func toFBData() -> Data {
        let temp = Monster()
        return temp.bbData
    }

}

extension Monster {

}

public final class Test: FBTable {

    public final lazy var a: Int16 = {
        return self.getInt16(vOffset: 0)
    }()

    public final lazy var b: Int8 = {
        return self.getInt8(vOffset: 2)
    }()

    public final override var hardPos: FBOffset {
        return 0
    }

    public final override var hardSize: UInt {
        return 4
    }

    public final override func toFBData() -> Data {
        let temp = Test()
        temp._add_a(i: self)
        temp._add_b(i: self)
        return temp.bbData
    }

}

extension Test {

    fileprivate final func _add_a(i: Test) {
        set(vOffset: 0, pOffset: 4, value: i.a)
    }

    fileprivate final func _add_b(i: Test) {
        set(vOffset: 2, pOffset: 6, value: i.b)
    }

}

public final class TestSimpleTableWithEnum: FBTable {

    public final lazy var color: Color? = {
        let m_color = Color(rawValue: self.getInt8(vOffset: 4))
        return m_color ?? Color(rawValue: 2)!
    }()

    public final override var hardPos: FBOffset {
        return 12
    }

    public final override var hardSize: UInt {
        return 17
    }

    public final override func toFBData() -> Data {
        let temp = TestSimpleTableWithEnum()
        temp._add_color(i: self)
        return temp.bbData
    }

}

extension TestSimpleTableWithEnum {

    fileprivate final func _add_color(i: TestSimpleTableWithEnum) {
        set(vOffset: 4, pOffset: 4, value: i.color?.rawValue)
    }

}

public final class Vec3: FBTable {

    public final lazy var x: Float32 = {
        return self.getFloat32(vOffset: 0)
    }()

    public final lazy var y: Float32 = {
        return self.getFloat32(vOffset: 4)
    }()

    public final lazy var z: Float32 = {
        return self.getFloat32(vOffset: 8)
    }()

    public final lazy var test1: Float64 = {
        return self.getFloat64(vOffset: 16)
    }()

    public final lazy var test2: Color? = {
        return Color(rawValue: self.getInt8(vOffset: 24))
    }()

    public final lazy var test3: Test? = {
        return self.getStruct(type: Test.self, vOffset: 26)
    }()

    public final override var hardPos: FBOffset {
        return 0
    }

    public final override var hardSize: UInt {
        return 32
    }

    public final override func toFBData() -> Data {
        let temp = Vec3()
        temp._add_x(i: self)
        temp._add_y(i: self)
        temp._add_z(i: self)
        temp._add_test1(i: self)
        temp._add_test2(i: self)
        temp._add_test3(i: self)
        return temp.bbData
    }

}

extension Vec3 {

    fileprivate final func _add_x(i: Vec3) {
        set(vOffset: 0, pOffset: 4, value: i.x)
    }

    fileprivate final func _add_y(i: Vec3) {
        set(vOffset: 4, pOffset: 8, value: i.y)
    }

    fileprivate final func _add_z(i: Vec3) {
        set(vOffset: 8, pOffset: 12, value: i.z)
    }

    fileprivate final func _add_test1(i: Vec3) {
        set(vOffset: 16, pOffset: 16, value: i.test1)
    }

    fileprivate final func _add_test2(i: Vec3) {
        set(vOffset: 24, pOffset: 24, value: i.test2?.rawValue)
    }

    fileprivate final func _add_test3(i: Vec3) {
        set(vOffset: 26, pOffset: 25, value: i.test3)
    }

}

public final class Ability: FBTable {

    public final lazy var id: UInt32 = {
        return self.getUInt32(vOffset: 0)
    }()

    public final lazy var distance: UInt32 = {
        return self.getUInt32(vOffset: 4)
    }()

    public final override var hardPos: FBOffset {
        return 0
    }

    public final override var hardSize: UInt {
        return 8
    }

    public final override func toFBData() -> Data {
        let temp = Ability()
        temp._add_id(i: self)
        temp._add_distance(i: self)
        return temp.bbData
    }

}

extension Ability {

    fileprivate final func _add_id(i: Ability) {
        set(vOffset: 0, pOffset: 4, value: i.id)
    }

    fileprivate final func _add_distance(i: Ability) {
        set(vOffset: 4, pOffset: 8, value: i.distance)
    }

}

public final class Stat: FBTable {

    public final lazy var id: String? = {
        return self.getString(vOffset: 4)
    }()

    public final lazy var val: Int64 = {
        return self.getInt64(vOffset: 6)
    }()

    public final lazy var count: UInt16 = {
        return self.getUInt16(vOffset: 8)
    }()

    public final override var hardPos: FBOffset {
        return 16
    }

    public final override var hardSize: UInt {
        return 34
    }

    public final override func toFBData() -> Data {
        let temp = Stat()
        temp._add_id(i: self)
        temp._add_val(i: self)
        temp._add_count(i: self)
        return temp.bbData
    }

}

extension Stat {

    fileprivate final func _add_id(i: Stat) {
        set(vOffset: 4, pOffset: 4, value: i.id)
    }

    fileprivate final func _add_val(i: Stat) {
        set(vOffset: 6, pOffset: 8, value: i.val)
    }

    fileprivate final func _add_count(i: Stat) {
        set(vOffset: 8, pOffset: 16, value: i.count)
    }

}

// MARK:  an example documentation comment: monster object 
public final class Monster: FBTable {

    public final lazy var pos: Vec3? = {
        return self.getStruct(type: Vec3.self, vOffset: 4)
    }()

    public final lazy var mana: Int16 = {
        let m_mana = self.getInt16(vOffset: 6)
        return m_mana != 0 ? m_mana : 150
    }()

    public final lazy var hp: Int16 = {
        let m_hp = self.getInt16(vOffset: 8)
        return m_hp != 0 ? m_hp : 100
    }()

    public final lazy var name: String? = {
        return self.getString(vOffset: 10)
    }()

    public final lazy var inventory: [UInt8]? = {
        return self.getNumbers(vOffset: 14)
    }()

    public final lazy var color: Color? = {
        let m_color = Color(rawValue: self.getInt8(vOffset: 16))
        return m_color ?? Color(rawValue: 8)!
    }()

    fileprivate final lazy var test_type: FBTable.Type? = {
        return `Any`(rawValue: self.getUInt8(vOffset: 18))?.type
    }()

    public final lazy var test: FBTable? = {
        return self.test_type != nil ? self.getTable(type: self.test_type!, vOffset: 20) : nil
    }()

    public final lazy var test4: [Test]? = {
        return self.getStructs(type: Test.self, vOffset: 22, byteSize: 4)
    }()

    public final lazy var testarrayofstring: [String]? = {
        return self.getStrings(vOffset: 24)
    }()

    // MARK:  an example documentation comment: this will end up in the generated code  multiline too 
    public final lazy var testarrayoftables: [Monster]? = {
        return self.getTables(type: Monster.self, vOffset: 26)
    }()

    public final lazy var enemy: Monster? = {
        return self.getTable(type: Monster.self, vOffset: 28)
    }()

    public final lazy var testnestedflatbuffer: [UInt8]? = {
        return self.getNumbers(vOffset: 30)
    }()

    public final lazy var testempty: Stat? = {
        return self.getTable(type: Stat.self, vOffset: 32)
    }()

    public final lazy var testbool: Bool = {
        return self.getBool(vOffset: 34)
    }()

    public final lazy var testhashs32_fnv1: Int32 = {
        return self.getInt32(vOffset: 36)
    }()

    public final lazy var testhashu32_fnv1: UInt32 = {
        return self.getUInt32(vOffset: 38)
    }()

    public final lazy var testhashs64_fnv1: Int64 = {
        return self.getInt64(vOffset: 40)
    }()

    public final lazy var testhashu64_fnv1: UInt64 = {
        return self.getUInt64(vOffset: 42)
    }()

    public final lazy var testhashs32_fnv1a: Int32 = {
        return self.getInt32(vOffset: 44)
    }()

    public final lazy var testhashu32_fnv1a: UInt32 = {
        return self.getUInt32(vOffset: 46)
    }()

    public final lazy var testhashs64_fnv1a: Int64 = {
        return self.getInt64(vOffset: 48)
    }()

    public final lazy var testhashu64_fnv1a: UInt64 = {
        return self.getUInt64(vOffset: 50)
    }()

    public final lazy var testarrayofbools: [Bool]? = {
        return self.getNumbers(vOffset: 52)
    }()

    public final lazy var testf: Float32 = {
        let m_testf = self.getFloat32(vOffset: 54)
        return m_testf != 0 ? m_testf : 3.14159
    }()

    public final lazy var testf2: Float32 = {
        let m_testf2 = self.getFloat32(vOffset: 56)
        return m_testf2 != 0 ? m_testf2 : 3.0
    }()

    public final lazy var testf3: Float32 = {
        return self.getFloat32(vOffset: 58)
    }()

    public final lazy var testarrayofstring2: [String]? = {
        return self.getStrings(vOffset: 60)
    }()

    public final lazy var testarrayofsortedstruct: [Ability]? = {
        return self.getStructs(type: Ability.self, vOffset: 62, byteSize: 8)
    }()

    public final override var hardPos: FBOffset {
        return 70
    }

    public final override var hardSize: UInt {
        return 221
    }

    public final override func toFBData() -> Data {
        let temp = Monster()
        temp._add_pos(i: self)
        temp._add_mana(i: self)
        temp._add_hp(i: self)
        temp._add_name(i: self)
        temp._add_inventory(i: self)
        temp._add_color(i: self)
        temp._add_test(i: self)
        temp._add_test4(i: self)
        temp._add_testarrayofstring(i: self)
        temp._add_testarrayoftables(i: self)
        temp._add_enemy(i: self)
        temp._add_testnestedflatbuffer(i: self)
        temp._add_testempty(i: self)
        temp._add_testbool(i: self)
        temp._add_testhashs32_fnv1(i: self)
        temp._add_testhashu32_fnv1(i: self)
        temp._add_testhashs64_fnv1(i: self)
        temp._add_testhashu64_fnv1(i: self)
        temp._add_testhashs32_fnv1a(i: self)
        temp._add_testhashu32_fnv1a(i: self)
        temp._add_testhashs64_fnv1a(i: self)
        temp._add_testhashu64_fnv1a(i: self)
        temp._add_testarrayofbools(i: self)
        temp._add_testf(i: self)
        temp._add_testf2(i: self)
        temp._add_testf3(i: self)
        temp._add_testarrayofstring2(i: self)
        temp._add_testarrayofsortedstruct(i: self)
        return temp.bbData
    }

}

extension Monster {

    fileprivate final func _add_pos(i: Monster) {
        set(vOffset: 4, pOffset: 4, value: i.pos)
    }

    fileprivate final func _add_mana(i: Monster) {
        set(vOffset: 6, pOffset: 36, value: i.mana)
    }

    fileprivate final func _add_hp(i: Monster) {
        set(vOffset: 8, pOffset: 38, value: i.hp)
    }

    fileprivate final func _add_name(i: Monster) {
        set(vOffset: 10, pOffset: 40, value: i.name)
    }

    fileprivate final func _add_inventory(i: Monster) {
        set(vOffset: 14, pOffset: 44, value: i.inventory)
    }

    fileprivate final func _add_color(i: Monster) {
        set(vOffset: 16, pOffset: 48, value: i.color?.rawValue)
    }

    fileprivate final func _add_test(i: Monster) {
        set(vOffset: 18, pOffset: 49, value: `Any`.value(i.test))
        set(vOffset: 20, pOffset: 50, value: i.test)
    }

    fileprivate final func _add_test4(i: Monster) {
        set(vOffset: 22, pOffset: 54, value: i.test4)
    }

    fileprivate final func _add_testarrayofstring(i: Monster) {
        set(vOffset: 24, pOffset: 58, value: i.testarrayofstring)
    }

    fileprivate final func _add_testarrayoftables(i: Monster) {
        set(vOffset: 26, pOffset: 62, value: i.testarrayoftables)
    }

    fileprivate final func _add_enemy(i: Monster) {
        set(vOffset: 28, pOffset: 66, value: i.enemy)
    }

    fileprivate final func _add_testnestedflatbuffer(i: Monster) {
        set(vOffset: 30, pOffset: 70, value: i.testnestedflatbuffer)
    }

    fileprivate final func _add_testempty(i: Monster) {
        set(vOffset: 32, pOffset: 74, value: i.testempty)
    }

    fileprivate final func _add_testbool(i: Monster) {
        set(vOffset: 34, pOffset: 78, value: i.testbool)
    }

    fileprivate final func _add_testhashs32_fnv1(i: Monster) {
        set(vOffset: 36, pOffset: 79, value: i.testhashs32_fnv1)
    }

    fileprivate final func _add_testhashu32_fnv1(i: Monster) {
        set(vOffset: 38, pOffset: 83, value: i.testhashu32_fnv1)
    }

    fileprivate final func _add_testhashs64_fnv1(i: Monster) {
        set(vOffset: 40, pOffset: 87, value: i.testhashs64_fnv1)
    }

    fileprivate final func _add_testhashu64_fnv1(i: Monster) {
        set(vOffset: 42, pOffset: 95, value: i.testhashu64_fnv1)
    }

    fileprivate final func _add_testhashs32_fnv1a(i: Monster) {
        set(vOffset: 44, pOffset: 103, value: i.testhashs32_fnv1a)
    }

    fileprivate final func _add_testhashu32_fnv1a(i: Monster) {
        set(vOffset: 46, pOffset: 107, value: i.testhashu32_fnv1a)
    }

    fileprivate final func _add_testhashs64_fnv1a(i: Monster) {
        set(vOffset: 48, pOffset: 111, value: i.testhashs64_fnv1a)
    }

    fileprivate final func _add_testhashu64_fnv1a(i: Monster) {
        set(vOffset: 50, pOffset: 119, value: i.testhashu64_fnv1a)
    }

    fileprivate final func _add_testarrayofbools(i: Monster) {
        set(vOffset: 52, pOffset: 127, value: i.testarrayofbools)
    }

    fileprivate final func _add_testf(i: Monster) {
        set(vOffset: 54, pOffset: 131, value: i.testf)
    }

    fileprivate final func _add_testf2(i: Monster) {
        set(vOffset: 56, pOffset: 135, value: i.testf2)
    }

    fileprivate final func _add_testf3(i: Monster) {
        set(vOffset: 58, pOffset: 139, value: i.testf3)
    }

    fileprivate final func _add_testarrayofstring2(i: Monster) {
        set(vOffset: 60, pOffset: 143, value: i.testarrayofstring2)
    }

    fileprivate final func _add_testarrayofsortedstruct(i: Monster) {
        set(vOffset: 62, pOffset: 147, value: i.testarrayofsortedstruct)
    }

}

